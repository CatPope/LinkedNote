"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebpackPlugin = void 0;
const node_crypto_1 = __importDefault(require("node:crypto"));
const node_path_1 = __importDefault(require("node:path"));
const promises_1 = require("stream/promises");
const core_utils_1 = require("@electron-forge/core-utils");
const plugin_base_1 = require("@electron-forge/plugin-base");
const web_multi_logger_1 = __importDefault(require("@electron-forge/web-multi-logger"));
const chalk_1 = __importDefault(require("chalk"));
const debug_1 = __importDefault(require("debug"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const listr2_1 = require("listr2");
const webpack_1 = __importDefault(require("webpack"));
const webpack_dev_server_1 = __importDefault(require("webpack-dev-server"));
const webpack_merge_1 = require("webpack-merge");
const ElectronForgeLogging_1 = __importDefault(require("./util/ElectronForgeLogging"));
const EntryPointPreloadPlugin_1 = __importDefault(require("./util/EntryPointPreloadPlugin"));
const once_1 = __importDefault(require("./util/once"));
const WebpackConfig_1 = __importDefault(require("./WebpackConfig"));
const d = (0, debug_1.default)('electron-forge:plugin:webpack');
const DEFAULT_PORT = 3000;
const DEFAULT_LOGGER_PORT = 9000;
class WebpackPlugin extends plugin_base_1.PluginBase {
    constructor(c) {
        super(c);
        this.name = 'webpack';
        this.isProd = false;
        this.watchers = [];
        this.servers = [];
        this.loggers = [];
        this.port = DEFAULT_PORT;
        this.loggerPort = DEFAULT_LOGGER_PORT;
        this.isValidPort = (port) => {
            if (port < 1024) {
                throw new Error(`Cannot specify port (${port}) below 1024, as they are privileged`);
            }
            else if (port > 65535) {
                throw new Error(`Port specified (${port}) is not a valid TCP port.`);
            }
            else {
                return true;
            }
        };
        this.exitHandler = (options, err) => {
            d('handling process exit with:', options);
            if (options.cleanup) {
                for (const watcher of this.watchers) {
                    d('cleaning webpack watcher');
                    watcher.close(() => {
                        /* Do nothing when the watcher closes */
                    });
                }
                this.watchers = [];
                for (const server of this.servers) {
                    d('cleaning http server');
                    server.close();
                }
                this.servers = [];
                for (const logger of this.loggers) {
                    d('stopping logger');
                    logger.stop();
                }
                this.loggers = [];
            }
            if (err)
                console.error(err.stack);
            // Why: This is literally what the option says to do.
            // eslint-disable-next-line no-process-exit
            if (options.exit)
                process.exit();
        };
        this.runWebpack = async (options, rendererOptions) => new Promise((resolve, reject) => {
            (0, webpack_1.default)(options).run(async (err, stats) => {
                if (rendererOptions && rendererOptions.jsonStats) {
                    for (const [index, entryStats] of (stats?.stats ?? []).entries()) {
                        const name = rendererOptions.entryPoints[index].name;
                        await this.writeJSONStats('renderer', entryStats, options[index].stats, name);
                    }
                }
                if (err) {
                    return reject(err);
                }
                return resolve(stats);
            });
        });
        this.init = (dir) => {
            this.setDirectories(dir);
            d('hooking process events');
            process.on('exit', (_code) => this.exitHandler({ cleanup: true }));
            process.on('SIGINT', (_signal) => this.exitHandler({ exit: true }));
        };
        this.setDirectories = (dir) => {
            this.projectDir = dir;
            this.baseDir = node_path_1.default.resolve(dir, '.webpack');
        };
        this.resolveForgeConfig = async (forgeConfig) => {
            if (!forgeConfig.packagerConfig) {
                forgeConfig.packagerConfig = {};
            }
            if (forgeConfig.packagerConfig.ignore) {
                if (typeof forgeConfig.packagerConfig.ignore !== 'function') {
                    console.error(chalk_1.default.red(`You have set packagerConfig.ignore, the Electron Forge webpack plugin normally sets this automatically.

Your packaged app may be larger than expected if you dont ignore everything other than the '.webpack' folder`));
                }
                return forgeConfig;
            }
            forgeConfig.packagerConfig.ignore = (file) => {
                if (!file)
                    return false;
                if (this.config.jsonStats && file.endsWith(node_path_1.default.join('.webpack', 'main', 'stats.json'))) {
                    return true;
                }
                if (this.allRendererOptions.some((r) => r.jsonStats) && file.endsWith(node_path_1.default.join('.webpack', 'renderer', 'stats.json'))) {
                    return true;
                }
                if (!this.config.packageSourceMaps && /[^/\\]+\.js\.map$/.test(file)) {
                    return true;
                }
                return !/^[/\\]\.webpack($|[/\\]).*$/.test(file);
            };
            return forgeConfig;
        };
        this.packageAfterCopy = async (_forgeConfig, buildPath) => {
            const pj = await fs_extra_1.default.readJson(node_path_1.default.resolve(this.projectDir, 'package.json'));
            if (!pj.main?.endsWith('.webpack/main')) {
                throw new Error(`Electron Forge is configured to use the Webpack plugin. The plugin expects the
"main" entry point in "package.json" to be ".webpack/main" (where the plugin outputs
the generated files). Instead, it is ${JSON.stringify(pj.main)}`);
            }
            if (pj.config) {
                delete pj.config.forge;
            }
            await fs_extra_1.default.writeJson(node_path_1.default.resolve(buildPath, 'package.json'), pj, {
                spaces: 2,
            });
            await fs_extra_1.default.mkdirp(node_path_1.default.resolve(buildPath, 'node_modules'));
        };
        this.compileMain = async (watch = false, logger) => {
            let tab;
            if (logger) {
                tab = logger.createTab('Main Process');
            }
            const mainConfig = await this.configGenerator.getMainConfig();
            await new Promise((resolve, reject) => {
                const compiler = (0, webpack_1.default)(mainConfig);
                const [onceResolve, onceReject] = (0, once_1.default)(resolve, reject);
                const cb = async (err, stats) => {
                    if (tab && stats) {
                        tab.log(stats.toString({
                            colors: true,
                        }));
                    }
                    if (this.config.jsonStats) {
                        await this.writeJSONStats('main', stats, mainConfig.stats, 'main');
                    }
                    if (err)
                        return onceReject(err);
                    if (!watch && stats?.hasErrors()) {
                        return onceReject(new Error(`Compilation errors in the main process: ${stats.toString()}`));
                    }
                    return onceResolve(undefined);
                };
                if (watch) {
                    this.watchers.push(compiler.watch({}, cb));
                }
                else {
                    compiler.run(cb);
                }
            });
        };
        this.compileRenderers = async (watch = false) => {
            for (const rendererOptions of this.allRendererOptions) {
                const stats = await this.runWebpack(await this.configGenerator.getRendererConfig(rendererOptions), rendererOptions);
                if (!watch && stats?.hasErrors()) {
                    throw new Error(`Compilation errors in the renderer: ${stats.toString()}`);
                }
            }
        };
        this.launchRendererDevServers = async (logger) => {
            const configs = [];
            const rollingDependencies = [];
            for (const [i, rendererOptions] of this.allRendererOptions.entries()) {
                const groupName = `group_${i}`;
                configs.push(...(await this.configGenerator.getRendererConfig(rendererOptions)).map((config) => ({
                    ...config,
                    name: groupName,
                    dependencies: [...rollingDependencies],
                })));
                rollingDependencies.push(groupName);
            }
            if (configs.length === 0) {
                return;
            }
            const preloadPlugins = [];
            let numPreloadEntriesWithConfig = 0;
            for (const entryConfig of configs) {
                if (!entryConfig.plugins)
                    entryConfig.plugins = [];
                entryConfig.plugins.push(new ElectronForgeLogging_1.default(logger.createTab(`Renderer Target Bundle (${entryConfig.target})`)));
                const filename = entryConfig.output?.filename;
                if (filename?.endsWith('preload.js')) {
                    let name = `entry-point-preload-${entryConfig.target}`;
                    if (preloadPlugins.includes(name)) {
                        name = `${name}-${++numPreloadEntriesWithConfig}`;
                    }
                    entryConfig.plugins.push(new EntryPointPreloadPlugin_1.default({ name }));
                    preloadPlugins.push(name);
                }
                entryConfig.infrastructureLogging = {
                    level: 'none',
                };
                entryConfig.stats = 'none';
            }
            const compiler = (0, webpack_1.default)(configs);
            const promises = preloadPlugins.map((preloadPlugin) => {
                return new Promise((resolve, reject) => {
                    compiler.hooks.done.tap(preloadPlugin, (stats) => {
                        if (stats.hasErrors()) {
                            return reject(new Error(`Compilation errors in the preload: ${stats.toString()}`));
                        }
                        return resolve(undefined);
                    });
                });
            });
            const webpackDevServer = new webpack_dev_server_1.default(this.devServerOptions(), compiler);
            await webpackDevServer.start();
            this.servers.push(webpackDevServer.server);
            await Promise.all(promises);
        };
        this.alreadyStarted = false;
        if (c.port) {
            if (this.isValidPort(c.port)) {
                this.port = c.port;
            }
        }
        if (c.loggerPort) {
            if (this.isValidPort(c.loggerPort)) {
                this.loggerPort = c.loggerPort;
            }
        }
        this.getHooks = this.getHooks.bind(this);
    }
    async writeJSONStats(type, stats, statsOptions, suffix) {
        if (!stats)
            return;
        d(`Writing JSON stats for ${type} config`);
        const jsonStats = stats.toJson(statsOptions);
        const jsonStatsFilename = node_path_1.default.resolve(this.baseDir, type, `stats-${suffix}.json`);
        await fs_extra_1.default.writeJson(jsonStatsFilename, jsonStats, { spaces: 2 });
    }
    get configGenerator() {
        if (!this._configGenerator) {
            this._configGenerator = new WebpackConfig_1.default(this.config, this.projectDir, this.isProd, this.port);
        }
        return this._configGenerator;
    }
    getHooks() {
        return {
            preStart: [
                (0, plugin_base_1.namedHookWithTaskFn)(async (task) => {
                    if (this.alreadyStarted)
                        return;
                    this.alreadyStarted = true;
                    await fs_extra_1.default.remove(this.baseDir);
                    const logger = new web_multi_logger_1.default(this.loggerPort);
                    this.loggers.push(logger);
                    await logger.start();
                    return task?.newListr([
                        {
                            title: 'Compiling main process code',
                            task: async () => {
                                await this.compileMain(true, logger);
                            },
                            rendererOptions: {
                                timer: { ...listr2_1.PRESET_TIMER },
                            },
                        },
                        {
                            title: 'Launching dev servers for renderer process code',
                            task: async (_, task) => {
                                await this.launchRendererDevServers(logger);
                                task.output = `Output Available: ${chalk_1.default.cyan(`http://localhost:${this.loggerPort}`)}\n`;
                            },
                            rendererOptions: {
                                persistentOutput: true,
                                timer: { ...listr2_1.PRESET_TIMER },
                            },
                        },
                    ]);
                }, 'Preparing webpack bundles'),
            ],
            prePackage: [
                (0, plugin_base_1.namedHookWithTaskFn)(async (task, config, platform, arch) => {
                    if (!task) {
                        throw new Error('Incompatible usage of webpack-plugin prePackage hook');
                    }
                    this.isProd = true;
                    await fs_extra_1.default.remove(this.baseDir);
                    // TODO: Figure out how to get matrix from packager
                    const arches = Array.from(new Set(arch.split(',').reduce((all, pArch) => (pArch === 'universal' ? all.concat(['arm64', 'x64']) : all.concat([pArch])), [])));
                    const firstArch = arches[0];
                    const otherArches = arches.slice(1);
                    const multiArchTasks = otherArches.length === 0
                        ? []
                        : [
                            {
                                title: 'Mapping native dependencies',
                                task: async (ctx) => {
                                    const firstArchDir = node_path_1.default.resolve(this.baseDir, firstArch);
                                    const nodeModulesDir = node_path_1.default.resolve(this.projectDir, 'node_modules');
                                    const mapping = Object.create(null);
                                    const webpackNodeFiles = await (0, fast_glob_1.default)('**/*.node', {
                                        cwd: firstArchDir,
                                    });
                                    const nodeModulesNodeFiles = await (0, fast_glob_1.default)('**/*.node', {
                                        cwd: nodeModulesDir,
                                    });
                                    const hashToNodeModules = Object.create(null);
                                    for (const nodeModulesNodeFile of nodeModulesNodeFiles) {
                                        const hash = node_crypto_1.default.createHash('sha256');
                                        const resolvedNodeFile = node_path_1.default.resolve(nodeModulesDir, nodeModulesNodeFile);
                                        await (0, promises_1.pipeline)(fs_extra_1.default.createReadStream(resolvedNodeFile), hash);
                                        const digest = hash.digest('hex');
                                        hashToNodeModules[digest] = hashToNodeModules[digest] || [];
                                        hashToNodeModules[digest].push(resolvedNodeFile);
                                    }
                                    for (const webpackNodeFile of webpackNodeFiles) {
                                        const hash = node_crypto_1.default.createHash('sha256');
                                        await (0, promises_1.pipeline)(fs_extra_1.default.createReadStream(node_path_1.default.resolve(firstArchDir, webpackNodeFile)), hash);
                                        const matchedNodeModule = hashToNodeModules[hash.digest('hex')];
                                        if (!matchedNodeModule || !matchedNodeModule.length) {
                                            throw new Error(`Could not find originating native module for "${webpackNodeFile}"`);
                                        }
                                        mapping[webpackNodeFile] = matchedNodeModule;
                                    }
                                    ctx.nativeDeps = mapping;
                                },
                            },
                            {
                                title: `Generating multi-arch bundles`,
                                task: async (_, task) => {
                                    return task.newListr(otherArches.map((pArch) => ({
                                        title: `Generating ${chalk_1.default.magenta(pArch)} bundle`,
                                        task: async (_, innerTask) => {
                                            return innerTask.newListr([
                                                {
                                                    title: 'Preparing native dependencies',
                                                    task: async (_, innerTask) => {
                                                        await (0, core_utils_1.listrCompatibleRebuildHook)(this.projectDir, await (0, core_utils_1.getElectronVersion)(this.projectDir, await fs_extra_1.default.readJson(node_path_1.default.join(this.projectDir, 'package.json'))), platform, pArch, config.rebuildConfig, innerTask);
                                                    },
                                                    rendererOptions: {
                                                        persistentOutput: true,
                                                        bottomBar: Infinity,
                                                        showTimer: true,
                                                    },
                                                },
                                                {
                                                    title: 'Mapping native dependencies',
                                                    task: async (ctx) => {
                                                        const nodeModulesDir = node_path_1.default.resolve(this.projectDir, 'node_modules');
                                                        // Duplicate the firstArch build
                                                        const firstDir = node_path_1.default.resolve(this.baseDir, firstArch);
                                                        const targetDir = node_path_1.default.resolve(this.baseDir, pArch);
                                                        await fs_extra_1.default.mkdirp(targetDir);
                                                        for (const child of await fs_extra_1.default.readdir(firstDir)) {
                                                            await fs_extra_1.default.promises.cp(node_path_1.default.resolve(firstDir, child), node_path_1.default.resolve(targetDir, child), {
                                                                recursive: true,
                                                            });
                                                        }
                                                        const nodeModulesNodeFiles = await (0, fast_glob_1.default)('**/*.node', {
                                                            cwd: nodeModulesDir,
                                                        });
                                                        const nodeModuleToHash = Object.create(null);
                                                        for (const nodeModulesNodeFile of nodeModulesNodeFiles) {
                                                            const hash = node_crypto_1.default.createHash('sha256');
                                                            const resolvedNodeFile = node_path_1.default.resolve(nodeModulesDir, nodeModulesNodeFile);
                                                            await (0, promises_1.pipeline)(fs_extra_1.default.createReadStream(resolvedNodeFile), hash);
                                                            nodeModuleToHash[resolvedNodeFile] = hash.digest('hex');
                                                        }
                                                        // Use the native module map to find the newly built native modules
                                                        for (const nativeDep of Object.keys(ctx.nativeDeps)) {
                                                            const archPath = node_path_1.default.resolve(targetDir, nativeDep);
                                                            await fs_extra_1.default.remove(archPath);
                                                            const mappedPaths = ctx.nativeDeps[nativeDep];
                                                            if (!mappedPaths || !mappedPaths.length) {
                                                                throw new Error(`The "${nativeDep}" module could not be mapped to any native modules on disk`);
                                                            }
                                                            if (!mappedPaths.every((mappedPath) => nodeModuleToHash[mappedPath] === nodeModuleToHash[mappedPaths[0]])) {
                                                                throw new Error(`The "${nativeDep}" mapped to multiple modules "${mappedPaths.join(', ')}" but the same modules post rebuild did not map to the same native code`);
                                                            }
                                                            await fs_extra_1.default.promises.cp(mappedPaths[0], archPath);
                                                        }
                                                    },
                                                },
                                            ], { concurrent: false });
                                        },
                                    })));
                                },
                            },
                        ];
                    return task.newListr([
                        {
                            title: `Preparing native dependencies for ${chalk_1.default.magenta(firstArch)}`,
                            task: async (_, innerTask) => {
                                await (0, core_utils_1.listrCompatibleRebuildHook)(this.projectDir, await (0, core_utils_1.getElectronVersion)(this.projectDir, await fs_extra_1.default.readJson(node_path_1.default.join(this.projectDir, 'package.json'))), platform, firstArch, config.rebuildConfig, innerTask);
                            },
                            rendererOptions: {
                                persistentOutput: true,
                                bottomBar: Infinity,
                                timer: { ...listr2_1.PRESET_TIMER },
                            },
                        },
                        {
                            title: 'Building webpack bundles',
                            task: async () => {
                                await this.compileMain();
                                await this.compileRenderers();
                                // Store it in a place that won't get messed with
                                // We'll restore the right "arch" in the afterCopy hook further down
                                const preExistingChildren = await fs_extra_1.default.readdir(this.baseDir);
                                const targetDir = node_path_1.default.resolve(this.baseDir, firstArch);
                                await fs_extra_1.default.mkdirp(targetDir);
                                for (const child of preExistingChildren) {
                                    await fs_extra_1.default.move(node_path_1.default.resolve(this.baseDir, child), node_path_1.default.resolve(targetDir, child));
                                }
                            },
                            rendererOptions: {
                                timer: { ...listr2_1.PRESET_TIMER },
                            },
                        },
                        ...multiArchTasks,
                    ], { concurrent: false }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    );
                }, 'Preparing webpack bundles'),
            ],
            postStart: async (_config, child) => {
                d('hooking electron process exit');
                child.on('exit', () => {
                    if (child.restarted)
                        return;
                    this.exitHandler({ cleanup: true, exit: true });
                });
            },
            resolveForgeConfig: this.resolveForgeConfig,
            packageAfterCopy: [
                async (_forgeConfig, buildPath, _electronVersion, _platform, pArch) => {
                    // Restore the correct 'arch' build of webpack
                    // Steal the correct arch, wipe the folder, move it back to pretend to be ".webpack" root
                    const tmpWebpackDir = node_path_1.default.resolve(buildPath, '.webpack.tmp');
                    await fs_extra_1.default.move(node_path_1.default.resolve(buildPath, '.webpack', pArch), tmpWebpackDir);
                    await fs_extra_1.default.remove(node_path_1.default.resolve(buildPath, '.webpack'));
                    await fs_extra_1.default.move(tmpWebpackDir, node_path_1.default.resolve(buildPath, '.webpack'));
                },
                this.packageAfterCopy,
            ],
        };
    }
    get allRendererOptions() {
        return Array.isArray(this.config.renderer) ? this.config.renderer : [this.config.renderer];
    }
    devServerOptions() {
        const cspDirectives = this.config.devContentSecurityPolicy ?? "default-src 'self' 'unsafe-inline' data:; script-src 'self' 'unsafe-eval' 'unsafe-inline' data:";
        const defaults = {
            hot: true,
            devMiddleware: {
                writeToDisk: true,
            },
            historyApiFallback: true,
        };
        const overrides = {
            port: this.port,
            setupExitSignals: true,
            static: node_path_1.default.resolve(this.baseDir, 'renderer'),
            headers: {
                ...this.config.devServer?.headers,
                'Content-Security-Policy': cspDirectives,
            },
        };
        return (0, webpack_merge_1.merge)(defaults, this.config.devServer ?? {}, overrides);
    }
}
exports.default = WebpackPlugin;
exports.WebpackPlugin = WebpackPlugin;
//# sourceMappingURL=data:application/json;base64,